---
title: "A summary of survival"
author: 'eleanorjackson'
date: '`r format(Sys.time(), "%d %B, %Y")`' 
format: gfm+emoji
editor: source
knitr:
  opts_chunk: 
    code-fold: true
execute:
  warning: false
---

```{r setup}
#| include: false

file_name <- knitr::current_input()

knitr::opts_chunk$set(
  fig.path =
    paste0("figures/", sub("\\.rmarkdown$", "", basename(file_name)), "/", sep = "")
)

set.seed(123)
ggplot2::theme_set(ggplot2::theme_classic(base_size = 10))
```

Here we will look at:

- Compare survival between forest types
- Compare survival between species
- Interactions of species & forest types
- Effect of climber cutting on survival

```{r packages}
#| output: false

library("tidyverse")
library("here")
library("patchwork")
library("survival")
library("ggsurvfit")
```


```{r}
# reading in data and adding a column distinguishing cohorts 1 & 2 from
# the primary forest seedlings
data <- 
  readRDS(here::here("data", "derived", "data_cleaned.rds")) %>% 
  mutate(census_no = as.ordered(census_no)) %>% 
  mutate(cohort = paste(forest_type, old_new, sep = "_")) %>% 
  filter(! cohort == "secondary_NA") %>% 
  filter(! str_detect(plant_id, "NA")) 
```


```{r}
data %>% 
  mutate(survival = as.factor(survival)) %>% 
  ggplot(aes(x = census_no, group = survival, 
             fill = survival)) +
  geom_bar(position = "fill") +
  facet_wrap(~cohort, ncol = 1,
             axis.labels = "all_x", axes = "all_x") +
  guides(x =  guide_axis(angle = 90)) +
  theme(legend.position = "top", legend.justification = "left") 
```

I think we need to remove seedlings that were already dead at the time of
their first census. These seedlings are "left-censored". 
Accounting for left-censored data in models is tricky and it's common to remove them.
Also - not sure how biologically relevant these points are - 
likely it was moving from nursery to field that killed them?

First creating a “time” variable. 
I’m using days since first survey at the individual plant level. 
I’ll also create a column which has the units in years rather than days, 
as it might be easier to read 
(years will still be continuous though e.g. 627 days = 1.717808 years).

```{r}
data <-
  data %>%
  group_by(plant_id) %>%
  slice_min(survey_date, with_ties = FALSE) %>%
  select(plant_id, survey_date) %>%
  rename(first_survey = survey_date) %>%
  ungroup() %>% 
  right_join(data)

data <-
  data %>%
  rowwise() %>% 
  mutate(
    days =
      survey_date - first_survey) %>% 
  ungroup() %>% 
  mutate(years = as.numeric(days, units= "weeks")/52.25,
         days_num = as.numeric(days))
```

```{r}
left_censored <- 
  data %>% 
  filter(survival == 0 & days == 0) %>%  
  select(plant_id) %>% 
  distinct()

data %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  mutate(survival = as.factor(survival)) %>% 
  ggplot(aes(x = census_no, group = survival, 
             fill = survival)) +
  geom_bar(position = "fill") +
  facet_wrap(~cohort, ncol = 1,
             axis.labels = "all_x", axes = "all_x") +
  guides(x =  guide_axis(angle = 90)) +
  theme(legend.position = "top", legend.justification = "left") +
  geom_hline(yintercept = 0.5, colour = "white", linetype = 2) +
  geom_hline(yintercept = 0.75, colour = "white", linetype = 3) +
  geom_hline(yintercept = 0.25, colour = "white", linetype = 3)
```

Above is plotted by census, but we can also plot by year.
Note though that some censuses stretch across year boundaries
and not every plot was surveyed every year,
so I expect proportion surviving to bounce around a bit 
due to the denominator not being constant.

I'll also remove "climber" surveys for this figure since 
these only surveyed two planting lines out of 20 for five of the SBE plots.

```{r}
data %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  filter(!str_detect(census_id, "climber")) %>% 
  mutate(survival = as.factor(survival)) %>% 
  mutate(year = year(survey_date)) %>% 
  ggplot(aes(x = year, group = survival, 
             fill = survival)) +
  geom_bar(position = "fill") +
  facet_wrap(~cohort, ncol = 1,
             axis.labels = "all_x", axes = "all_x") +
  theme(legend.position = "top", legend.justification = "left") +
  geom_hline(yintercept = 0.5, colour = "white", linetype = 2) +
  geom_hline(yintercept = 0.75, colour = "white", linetype = 3) +
  geom_hline(yintercept = 0.25, colour = "white", linetype = 3)
```


```{r}
data %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  filter(!str_detect(census_id, "climber")) %>% 
  filter(survival == "0") %>%
  group_by(plant_id) %>%
  slice_min(lubridate::ymd(survey_date), with_ties = FALSE) %>%
  ungroup() %>% 
  ggplot(aes(x = years, 
             colour = cohort,
             group = cohort)) +
  geom_density(linewidth = 0.75) +
  ylab("Event density")
```

Seedling deaths seem to happen fairly gradually over time in the primary forest,
for the secondary forest we see big spikes in deaths over time - 
but only due to sampling effort.

Also looks like after 15 years, 
there are no deaths in the 2^nd^ cohort of secondary forest seedlings,
but this is because we have no data past this point - it's in the future!

Perhaps we can visualise events (deaths) a little differently:

```{r}
data %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  filter(!str_detect(census_id, "climber")) %>% 
  filter(survival == "0") %>%
  group_by(plant_id) %>%
  slice_min(lubridate::ymd(survey_date), with_ties = FALSE) %>%
  ungroup() %>% 
  mutate(year = year(survey_date)) %>% 
  ggplot(aes(x = year, 
             fill = cohort,
             group = cohort)) +
  geom_bar() +
  facet_wrap(~cohort, ncol = 1, scales = "free_y") +
  labs(y = "# of new deaths")
```

Patterns still obscured by *when* the surveys took place, 
i.e. spike in mortality in 2010 in the secondary forest probably just because
seedlings hadn't been censused for four years.

```{r}
data %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  filter(case_when(
    forest_type == "primary" & census_no == 22 ~ TRUE,
    forest_type == "secondary" & census_no == 26 ~ TRUE
  )) %>% 
  group_by(cohort, genus_species) %>% 
  summarise(n_dead = sum(survival == "0"), 
            n_alive = sum(survival == "1")) %>% 
  mutate(prop_alive = n_alive / (n_dead + n_alive)) %>% 
  select(- n_dead, - n_alive) %>% 
  pivot_wider(names_from = cohort, values_from = prop_alive) %>% 
  arrange(desc(primary_NA)) %>% 
  knitr::kable(digits = 2)
```

Table shows proportion alive in the most recent census by species and forest type.

## Survival curves

I want to fit some survival curves - 
to do this we need to sort out the censoring.

A common problem with continuous time to event data is that 
we often don't know when exactly an event happened - 
a seedling was alive in one census and dead in the next but 
could have died at any point between those two censuses.

This is what we call interval censored data. 
You can also get right censored data 
(e.g. seedling still alive at the end of the study), 
and left censored data (seedling already dead at the start of the study, 
which we filtered out above).

```{r}
interval_censored <-
  data %>% 
  filter(survival == 0) %>% 
  group_by(plant_id) %>% 
  slice_min(survey_date, with_ties = FALSE) %>% 
  ungroup() %>% 
  rename(time_to_dead = years) %>% 
  select(plant_id, genus_species, plot, cohort, time_to_dead) %>% 
  mutate(censor = "interval") 


interval_censored <-
  data %>% 
  filter(plant_id %in% interval_censored$plant_id) %>% 
  filter(survival == 1) %>% 
  group_by(plant_id) %>% 
  slice_max(survey_date, with_ties = FALSE) %>% 
  ungroup() %>% 
  rename(time_to_last_alive = years) %>% 
  select(plant_id, time_to_last_alive) %>% 
  right_join(interval_censored) 
  
  
right_censored <- 
  data %>% 
  filter(!plant_id %in% interval_censored$plant_id) %>% 
  group_by(plant_id) %>% 
  slice_max(survey_date, with_ties = FALSE) %>% 
  ungroup() %>% 
  rename(time_to_last_alive = years) %>% 
  select(plant_id, genus_species, plot, cohort, time_to_last_alive) %>% 
  mutate(censor = "right")

data_aggregated <- 
  bind_rows(interval_censored, right_censored) %>% 
  filter(time_to_last_alive > 0) %>% 
  mutate(plot_id = as.factor(paste(cohort, plot, sep = "_")))

data_aggregated <- 
  data_aggregated %>% 
  mutate(time_to_dead = case_when(
    censor == "right" ~ time_to_last_alive,
    .default = time_to_dead
  )) 
```


```{r}
#| fig-height: 7
#| fig-width: 5

data_aggregated %>% 
  slice_sample(n = 30) %>%
  pivot_longer(cols = c(time_to_last_alive, time_to_dead),
               values_to = "years") %>% 
  ggplot(aes(y = plant_id, x = years, colour = name, group = plant_id)) +
  geom_path(colour = "lightgrey") +
  geom_point(alpha = 0.5, size = 2) +
  theme(legend.position = "top")
```

Seedlings  with only one data point are right censored and 
seedlings with two data points are interval censored.

Censoring is built into survival models by incorporating it into the 
likelihood function underlying the analysis.

The survival probability at a certain time 
is a conditional probability of surviving beyond that time, 
given that an individual has survived just prior to that time.

The [Kaplan-Meier estimate](https://en.wikipedia.org/wiki/Kaplan–Meier_estimator) 
of survival probability at a given time is 
the product of these conditional probabilities up until that given time.

We can fit a survival curve and create a K-M plot using the `{survival}` package.

```{r}
# different packages want censors formatted in different ways
data_surv <- 
  data_aggregated %>% 
  mutate(event = recode(censor, "interval" = 3, "right" = 0, "left" = 2)) %>% 
  mutate(time_to_dead = case_when(
    censor == "right" ~ NA,
    .default = time_to_dead
  ))

fit_surv <- 
  survfit(data = data_surv,
          Surv(time = time_to_last_alive, 
               time2 = time_to_dead,
               type = "interval2") ~ cohort)
```

```{r}
fit_surv %>% 
  ggsurvfit::ggsurvfit(theme = theme_classic(base_size = 10)) +
  labs(
    x = "Years",
    y = "Survival probability"
  ) + 
  add_confidence_interval() +
  ggtitle("Kaplan-Meier plot")
```

```{r}
fit_surv_sp <- 
  survfit(data = data_surv,
          Surv(time = time_to_last_alive, 
               time2 = time_to_dead,
               type = "interval2") ~ genus_species)
```

I've removed the CI's for species else you can't see anything.

```{r}
fit_surv_sp %>% 
  ggsurvfit::ggsurvfit(theme = theme_classic(base_size = 10)) +
  labs(
    x = "Years",
    y = "Survival probability"
  ) + 
  scale_colour_viridis_d() +
  ggtitle("Kaplan-Meier plot")
```

```{r}
fit_surv_sp_p <- 
  survfit(data = filter(data_surv, cohort == "primary_NA"),
          Surv(time = time_to_last_alive, 
               time2 = time_to_dead,
               type = "interval2") ~ genus_species)

fit_surv_sp_s <- 
  survfit(data = filter(data_surv, str_detect(cohort, "secondary")),
          Surv(time = time_to_last_alive, 
               time2 = time_to_dead,
               type = "interval2") ~ genus_species)
```

```{r}
#| fig-width: 7
#| fig-height: 10

fit_surv_sp_p %>% 
  ggsurvfit::ggsurvfit(theme = theme_classic(base_size = 10)) +
  labs(
    x = "Years",
    y = "Survival probability"
  ) + 
  scale_colour_viridis_d() +
  ggtitle("Primary forest") +
  
  fit_surv_sp_s %>% 
  ggsurvfit::ggsurvfit(theme = theme_classic(base_size = 10)) +
  labs(
    x = "Years",
    y = "Survival probability"
  ) + 
  scale_colour_viridis_d() +
  ggtitle("Secondary forest") +
  
  plot_layout(guides = "collect", ncol = 1)
```

It's hard to see what's going on with so many colours.

## Binomial survival

We can also plot survival as a binomial.

```{r}
p <- ggplot() +
  geom_smooth(data = filter(data, !plant_id %in% left_censored$plant_id), 
              aes(x = days_num, y = survival), 
              method = "glm", method.args = list(family = "binomial")) +
  facet_wrap(~forest_type)

p +
  ggdist::geom_dots(data = filter(data, !plant_id %in% left_censored$plant_id), 
                    aes(y = as.numeric(survival), x = days_num, 
                        side = ifelse(survival == 0, "bottom", "top")), 
                    color = "grey20", binwidth = 150, overflow = "compress", 
                    shape = 16, alpha = 0.3, size = 0.5) 
```

```{r}
ggplot(data = filter(data, !plant_id %in% left_censored$plant_id)) +
  geom_smooth(aes(x = years, 
                  y = survival, 
                  colour = cohort), 
              method = "glm", method.args = list(family = "binomial")) 
```


The shape of survival looks similar in the two forest types, 
but higher for primary forest seedlings.

```{r}
data %>%  
  filter(!plant_id %in% left_censored$plant_id) %>% 
  ggplot() +
  geom_smooth(aes(survival, x = years, 
                  colour = genus_species), 
              se = FALSE, linewidth = 0.7,
              method = "glm", method.args = list(family = "binomial")) +
  facet_wrap(~forest_type) +
  scale_colour_viridis_d() 
```

```{r}
#| fig-width: 7
#| fig-height: 10

data %>%  
  filter(!plant_id %in% left_censored$plant_id) %>% 
  ggplot(aes(survival, x = years, 
                  colour = cohort)) +
  geom_smooth(se = FALSE, linewidth = 0.7,
              method = "glm", method.args = list(family = "binomial")) +
  facet_wrap(~genus_species, ncol = 5)  +
  ggtitle("geom_smooth(method = `glm`)") +
  
  data %>%  
  filter(!plant_id %in% left_censored$plant_id) %>% 
  ggplot(aes(survival, x = years, 
                  colour = cohort)) +
  geom_smooth(se = FALSE, linewidth = 0.7,
              method = "gam", method.args = list(family = "binomial")) +
  facet_wrap(~genus_species, ncol = 5)  +
  ggtitle("geom_smooth(method = `gam`)") +
  
  plot_layout(guides = "collect", ncol = 1) &
  theme(legend.position = "bottom", legend.justification = "left") 
  
```

This is quite interesting, 
survival always higher for primary forest seedlings.

## Climber-cut vs non-climber cut intensively sampled plots

```{r}
data %>% 
  filter(forest_type == "secondary") %>% 
  mutate(climber_cut = ifelse(
    plot %in% c("05", "11", "14"),
    TRUE, FALSE
  )) %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  filter(census_no == 26) %>% 
  group_by(climber_cut, genus_species) %>% 
  summarise(n_dead = sum(survival == "0"), 
            n_alive = sum(survival == "1")) %>%  
  mutate(prop_alive = n_alive / (n_dead + n_alive)) %>% 
  select(- n_dead, - n_alive) %>% 
  pivot_wider(names_from = climber_cut, values_from = prop_alive) %>% 
  rename(climbers_cut = `TRUE`, climbers_not_cut = `FALSE`) %>% 
  arrange(desc(climbers_cut)) %>% 
  knitr::kable(digits = 2)
```

Table shows proportion alive in the most recent census in the secondary forest.

```{r}
data %>%  
  filter(forest_type == "secondary") %>% 
  mutate(climber_cut = ifelse(
    plot %in% c("05", "11", "14"),
    TRUE, FALSE
  )) %>% 
  filter(!plant_id %in% left_censored$plant_id) %>% 
  ggplot() +
  geom_smooth(aes(survival, x = years, 
                  colour = climber_cut), 
              linewidth = 0.7,
              method = "glm", method.args = list(family = "binomial")) +
  facet_wrap(~genus_species, ncol = 5) +
  theme(legend.position = "bottom")
```
