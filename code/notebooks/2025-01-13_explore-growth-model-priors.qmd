---
title: "Explore priors for the growth models"
author: 'eleanorjackson'
date: '`r format(Sys.time(), "%d %B, %Y")`' 
format: gfm+emoji
editor: source
execute:
  warning: false
---

```{r setup}
#| include: false

file_name <- knitr::current_input()

knitr::opts_chunk$set(
  fig.path =
    paste0("figures/", sub("\\.rmarkdown$", "", basename(file_name)), 
           "/", sep = "")
)

set.seed(123)
ggplot2::theme_set(ggplot2::theme_classic(base_size = 10))
```


```{r}
#| output: FALSE

library("tidyverse")
library("here")
library("patchwork")
library("brms")
library("tidybayes")
library("modelr")
```


```{r}
data <- 
  readRDS(here::here("data", "derived", "data_cleaned.rds"))

ft_lognorm <-
  readRDS(here::here("output", "models", "ft_lognorm.rds"))
```

Selecting trees which have more than 5 data points.

```{r}
well_sampled_trees <- 
  data %>% 
  group_by(plant_id) %>% 
  summarise(records = sum(!is.na(dbh_mean))) %>% 
  filter(records > 5)
```

Now taking a random sample of 100 trees.

```{r}
data_sample <-
  data %>% 
  filter(survival == 1) %>% 
  filter(plant_id %in% well_sampled_trees$plant_id) %>% 
  filter(plant_id %in% sample(unique(plant_id), 100))
```


## Define model formula

```{r}
gompertz1 <- bf(dbh_mean ~ log(A * exp( -exp( -(k * (years - delay) ) ) ) ),
             A ~ 0 + forest_type + (1 | plant_id),
             k ~ 0 + forest_type + (1 | plant_id),
             delay ~ 0 + forest_type + (1 | plant_id),
             nl = TRUE)

```

- `A` is the adult or maximum DBH
- `k` is a growth rate coefficient which affects the slope
- `delay` represents time at inflection i.e. it shifts the sigmoidal curve horizontally without changing it's shape

## Posterior for _A_:

_A_ is the assymptote or maximum tree DBH per individual.

Max dbh we might expect: 200cm - [largest danum tree](https://coomeslab.org/portfolio/the-worlds-tallest-tropical-tree-in-three-dimensions/).
"Large" diameter trees in the Danum 50ha plot (the largest 1% of trees â‰¥ 1 cm DBH in the forest) are above 65.7cm (https://doi.org/10.1111/geb.12747)

Posteriors from previous model fit with full data: 

```{r}
ft_lognorm %>% 
  spread_draws(b_A_forest_typeprimary, b_A_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_A_forest_typeprimary, b_A_forest_typesecondary), 
               names_to = "parameter") %>% 
  mutate(A_cm = exp(value)) %>% 
  ggplot(aes(x = A_cm, y = parameter)) +
  stat_halfeye() 
  
```

suggested priors:

```{r}
rlnorm(n = 1000, meanlog = 4, sdlog = 1) %>% 
  density() %>% 
  plot(xlim = c(0, 1000))

rlnorm(n = 1000, meanlog = log(150), sdlog = 1.5) %>% 
  density() %>% 
  plot(xlim = c(0, 1000))

rgamma(n = 10000, shape = 1, rate = 0.0035) %>%
  density() %>% 
  plot(xlim = c(0, 1000))

```

## Posterior for _k_:

_k_ is a constant that determines the rate of change of the curve (how squished is the S curve on the x-axis?)

Posteriors from previous model fit with full data:

```{r}
ft_lognorm %>% 
  spread_draws(b_k_forest_typeprimary, b_k_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_k_forest_typeprimary, b_k_forest_typesecondary), 
               names_to = "parameter") %>% 
  mutate(k = value) %>% 
  ggplot(aes(x = k, y = parameter)) +
  stat_halfeye()
```

```{r}
rstudent_t(n = 1000, df = 5, mu = 0, sigma = 2) %>% 
  density() %>% 
  plot(xlim = c(0, 20)) 
```

## Posterior for _delay_:

_delay_ is a constant that determines displacement on the x axis 
(x-intercept in years). 

Posteriors from previous model fit with full data:

```{r}
ft_lognorm %>% 
  spread_draws(b_delay_forest_typeprimary, b_delay_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_delay_forest_typeprimary, b_delay_forest_typesecondary), 
               names_to = "parameter") %>% 
  mutate(delay = value) %>% 
  ggplot(aes(x = delay, y = parameter)) +
  stat_halfeye()
```

I actually think that _delay_ could be negative
beacuse the trees were growing in pots before being planted in the field
and we only have measurements from the field.

```{r}
rstudent_t(n = 1000, df = 5, mu = 0, sigma = 20) %>% 
  density() %>% 
  plot(xlim = c(-40, 40))
```

## Define priors

```{r}
priors1 <- c(
  prior(lognormal(5, 1.2), nlpar = "A", lb = 0),
  prior(student_t(5, 0, 2), nlpar = "k", lb = 0),
  prior(student_t(5, 0, 20), nlpar = "delay"))
```

Fit model with priors

```{r}
#| output: false

m1 <- 
  brm(gompertz1,
      data = data_sample,
      family = brmsfamily("lognormal"), 
      prior = priors1,
      iter = 500,
      cores = 4,
      chains = 4,
      seed = 123,
      file = here::here("code", "notebooks", "models",
                        "2025-01-13_explore-growth-model-priors", 
                        "m1.rds"),
      sample_prior = "yes",
      file_refit = "always")
```

# plot fits

```{r}
#| fig-height: 8
#| fig-width: 8

keys_ft_sp <- data_sample %>%
  select(plant_id, forest_type, genus_species) %>%
  distinct(plant_id, .keep_all = TRUE) %>%
  mutate(plant_id = droplevels(plant_id))

data_sample %>%
  data_grid(years = seq_range(years, n = 20),
            plant_id = droplevels(unique(data_sample$plant_id))) %>%
  left_join(keys_ft_sp) %>%
  add_predicted_draws(m1) %>%
  ggplot(aes(y = dbh_mean, x = years)) +
  geom_point(data = data_sample,
             aes(colour = forest_type),
             shape = 16,
             alpha = 0.6) +
  stat_lineribbon(aes(y = .prediction,
                      group = plant_id,
                      colour = forest_type),
                  .width = 0,
                  linewidth = 1,
                  alpha = 0.3) +
  stat_lineribbon(aes(y = .prediction,
                      group = genus_species),
                  colour = "black",
                  linetype = 2,
                  linewidth = 1.5,
                  .width = 0,
                  show.legend = FALSE) +
  facet_wrap(~genus_species,
             scales = "free_y") +
  theme(legend.position = "bottom")
```


# Compare prior and posterior distributions

## _A_

```{r}
prior_A <- 
  m1 %>% 
  prior_draws() %>% 
  pivot_longer(cols = b_A, 
               names_to = "parameter") %>% 
  mutate(parameter = case_match(parameter, "b_A" ~ "b_A_prior")) %>% 
  select(value, parameter)

posterior_A <-
  m1 %>% 
  spread_draws(b_A_forest_typeprimary, b_A_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_A_forest_typeprimary, b_A_forest_typesecondary), 
               names_to = "parameter") %>% 
  select(value, parameter)

bind_rows(prior_A, posterior_A) %>% 
  ggplot(aes(x = value, y = parameter,
             fill = parameter)) +
  stat_halfeye(alpha = 0.4, 
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(0, 1000)) +
  
  bind_rows(prior_A, posterior_A) %>% 
  ggplot(aes(x = value, y = parameter,
             fill = parameter)) +
  stat_halfeye(alpha = 0.4, 
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(0, 200)) +
  
  plot_layout(guides = "collect", ncol = 1)+
  plot_annotation(title = "A")
  

```

## _k_

```{r}
prior_k <- 
  m1 %>% 
  prior_draws() %>% 
  pivot_longer(cols = b_k, 
               names_to = "parameter") %>% 
  mutate(parameter = case_match(parameter, "b_k" ~ "b_k_prior")) %>% 
  select(value, parameter)

posterior_k <-
  m1 %>% 
  spread_draws(b_k_forest_typeprimary, b_k_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_k_forest_typeprimary, b_k_forest_typesecondary), 
               names_to = "parameter") %>% 
  select(value, parameter)

bind_rows(prior_k, posterior_k) %>% 
  ggplot(aes(x = value, 
             fill = parameter, 
             y = parameter)) +
  stat_halfeye(alpha = 0.4, 
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(0, 10)) +
  
  bind_rows(prior_k, posterior_k) %>% 
  ggplot(aes(x = value, 
             fill = parameter, 
             y = parameter)) +
  stat_halfeye(alpha = 0.4, 
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(0, 0.5)) +
  
  plot_layout(guides = "collect", ncol = 1)+
  plot_annotation(title = "k")
  
  
```

## delay

```{r}
prior_delay <- 
  m1 %>% 
  prior_draws() %>% 
  pivot_longer(cols = b_delay, 
               names_to = "parameter") %>% 
  mutate(parameter = case_match(parameter, "b_delay" ~ "b_delay_prior")) %>% 
  select(value, parameter)

posterior_delay <-
  m1 %>% 
  spread_draws(b_delay_forest_typeprimary, b_delay_forest_typesecondary) %>% 
  pivot_longer(cols = 
                 c(b_delay_forest_typeprimary, b_delay_forest_typesecondary), 
               names_to = "parameter") %>% 
  select(value, parameter)

bind_rows(prior_delay, posterior_delay) %>% 
  ggplot(aes(x = value, 
             fill = parameter,
             y = parameter)) +
  stat_halfeye(alpha = 0.4, 
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(-50, 50)) +
  
  bind_rows(prior_delay, posterior_delay) %>% 
  ggplot(aes(x = value, 
             fill = parameter,
             y = parameter)) +
  stat_halfeye(alpha = 0.4,  
               normalize = "groups",
               point_interval = "mode_hdi") +
  coord_cartesian(xlim = c(-5, 10)) +
  
  plot_layout(guides = "collect", ncol = 1) +
  plot_annotation(title = "delay")
```
