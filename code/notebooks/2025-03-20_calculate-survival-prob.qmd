---
title: "Calculate survival probability"
author: 'eleanorjackson'
date: '`r format(Sys.time(), "%d %B, %Y")`' 
format: 
  gfm:
    toc: true
editor: source
execute:
  warning: false
---

```{r setup}
#| include: false

file_name <- knitr::current_input()

knitr::opts_chunk$set(
  fig.path =
    paste0("figures/", sub("\\.rmarkdown$", "", basename(file_name)), 
           "/", sep = "")
)

set.seed(123)
ggplot2::theme_set(ggplot2::theme_bw(base_size = 10))
```

Getting survival probability and hazards form our first survival models.


```{r}
library("tidyverse")
library("patchwork")
library("modelr")
library("tidybayes")
```


```{r}
survival_model <- 
  readRDS(here::here("output", "models", 
                     "survival", "survival_model.rds"))

survival_model_impute <- 
  readRDS(here::here("output", "models", 
                     "survival", "survival_model_impute.rds"))

```


## Censor data

(I need to build this into the workflow)

```{r}
data <-
  readRDS(here::here("data", "derived", "data_cleaned.rds"))

# time to first recorded dead
interval_censored <-
  data %>%
  filter(survival == 0) %>%
  group_by(plant_id) %>%
  slice_min(survey_date, with_ties = FALSE) %>%
  ungroup() %>%
  rename(time_to_dead = years) %>%
  select(plant_id, genus_species, plot, forest_logged, cohort, time_to_dead) %>%
  mutate(censor = "interval")

# time to last recorded alive
interval_censored <-
  data %>%
  filter(plant_id %in% interval_censored$plant_id) %>%
  filter(survival == 1) %>%
  group_by(plant_id) %>%
  slice_max(survey_date, with_ties = FALSE) %>%
  ungroup() %>%
  rename(time_to_last_alive = years) %>%
  select(plant_id, time_to_last_alive, dbh_mean, dbase_mean) %>%
  right_join(interval_censored)

# trees never recorded dead
right_censored <-
  data %>%
  filter(!plant_id %in% interval_censored$plant_id) %>%
  group_by(plant_id) %>%
  slice_max(survey_date, with_ties = FALSE) %>%
  ungroup() %>%
  rename(time_to_last_alive = years) %>%
  select(plant_id, genus_species, plot, forest_logged,
         cohort, time_to_last_alive, dbh_mean, dbase_mean) %>%
  mutate(censor = "right")

data_aggregated <-
  bind_rows(interval_censored, right_censored) %>%
  filter(time_to_last_alive > 0) %>%
  mutate(dbase_mean_sc = scale(dbase_mean),
         dbh_mean_sc = scale(dbh_mean))
```


Much of this code is coming from the SI of: [Fully flexible analysis of behavioural sequences based on parametric survival models with frailties ‚Äî A tutorial](https://doi.org/10.1111/eth.13225)

`surv = exp(-(((time - 0) / exp (b_Intercept + b_parameter))^shape))) `

[This blog post](https://www.r-bloggers.com/2020/01/survival-analysis-fitting-weibull-models-for-improving-device-reliability-in-r/) is also helpful.

>Just like with the survival package, the default parameterization in brms can easily trip you up. We are fitting an intercept-only model meaning there are no predictor variables. The parameters that get estimated by brm() are the Intercept and shape. We can use the shape estimate as-is, but it‚Äôs a bit tricky to recover the scale. The key is that brm() uses a log-link function on the mean ùúá. There is no doubt that this is a rambling post - even so, it is not within scope to try to explain link functions and GLM‚Äôs (I‚Äôm not expert enough to do it anyways, refer to Statistical Rethinking by McElreath). In short, to convert to scale we need to both undo the link function by taking the exponent and then refer to the brms documentation to understand how the mean ùúá relates to the scale ùõΩ. The operation looks like this:

`scale = exp(Intercept)/(gamma(1 + 1/shape)) `

Except I am using a no intercept model,
i.e. intercept is allowed to vary by group.
I think it'll look like this, with the intercept removed:

`surv = exp(-(((time - 0) / exp (b_parameter))^shape))) `

# Simple survival model

## Survival over time

```{r}
# set up data-set for prediction (years to be predicted)
pred_df <- 
  data_aggregated %>%
  data_grid(time_to_last_alive = 
              seq_range(time_to_last_alive, n = 20, expand = TRUE)) %>%
  mutate(.chain = NA) %>%
  mutate(shape = NA) %>%
  mutate(.draw = NA) %>%
  mutate(.iteration = NA) %>%
  mutate(b_forest_logged0 = NA) %>%
  mutate(b_forest_logged1 = NA) 

# put together the relevant estimates from the mcmc chains
mcmc_df <- 
  survival_model %>%
  spread_draws (b_forest_logged0,
                b_forest_logged1,
                shape) %>%
  mutate (time_to_last_alive = NA) 

# combine information for prediction and MCMC chains,
# estimate survival, hazard and relative hazard curves
curves_df <- 
  union(mcmc_df, pred_df) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_forest_logged0,
      b_forest_logged1,
      shape
    ),
    time_to_last_alive
  ) %>%
  filter(!is.na(time_to_last_alive)) %>%
  filter(!is.na(.draw)) %>%
  # survival curves
  mutate (primary_forest_surv = exp(-(((time_to_last_alive - 0) / 
                           exp(b_forest_logged0))^shape))) %>%
  mutate (secondary_forest_surv = exp(-(((time_to_last_alive - 0) / 
                           exp(b_forest_logged1))^shape))) %>%
  # hazard curves
  mutate (primary_forest_haz = ((1 / exp (b_forest_logged0)) * shape *
                    ((time_to_last_alive - 0) / 
                       exp (b_forest_logged0))^(shape - 1))) %>%
  mutate (secondary_forest_haz = ((1 / exp (b_forest_logged1)) * shape *
                    ((time_to_last_alive - 0) / 
                       exp (b_forest_logged1))^(shape - 1)))  

```

```{r}
curves_df %>% 
  pivot_longer(c(primary_forest_surv, secondary_forest_surv)) %>% 
  ggplot (aes (x= time_to_last_alive, 
               y= value, 
               colour = name, 
               fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Survival probability")+
  xlab("Years since first survey")
```

```{r}
curves_df %>% 
  pivot_longer(c(primary_forest_haz, secondary_forest_haz)) %>% 
  ggplot (aes (x= time_to_last_alive, 
               y= value, 
               colour = name, 
               fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Hazard") +
  xlab("Years since first survey")
```


## Survival over size

```{r}
pred_df_sz <- 
  data_aggregated %>%
  data_grid(dbase_mean_sc = 
              seq(0.1, 50, 1)) %>%
  mutate(.chain = NA) %>%
  mutate(shape = NA) %>%
  mutate(.draw = NA) %>%
  mutate(.iteration = NA) %>%
  mutate(b_forest_logged0 = NA) %>%
  mutate(b_forest_logged1 = NA)

# put together the relevant estimates from the mcmc chains
mcmc_df_sz <-
  survival_model %>%
  spread_draws(b_forest_logged0,
               b_forest_logged1,
               shape) %>%
  mutate(dbase_mean_sc = NA) 

# combine information for prediction and MCMC chains,
# estiamte survival, hazard and relative hazard curves
curves_df_sz <-
  union(pred_df_sz, mcmc_df_sz) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_forest_logged0,
      b_forest_logged1,
      shape
    ),
    dbase_mean_sc
  ) %>%
  filter (!is.na(dbase_mean_sc)) %>%
  filter (!is.na(.draw)) %>%
  # survival curves
  mutate (primary_forest_surv = exp (-(((dbase_mean_sc - 0) / 
                            exp (b_forest_logged0))^shape))) %>%
  mutate (secondary_forest_surv = exp (-(((dbase_mean_sc - 0) / 
                            exp (b_forest_logged1))^shape))) %>%
  # hazard curves
  mutate(primary_forest_haz = ((1 / exp (b_forest_logged0)) * shape *
                    ((dbase_mean_sc - 0) / 
                       exp (b_forest_logged0))^(shape - 1))) %>%
  mutate(secondary_forest_haz = ((1 / exp (b_forest_logged1)) * shape *
                    ((dbase_mean_sc - 0) / 
                       exp (b_forest_logged1))^(shape - 1))) 
```

```{r}
curves_df_sz %>% 
  pivot_longer(c(primary_forest_surv, secondary_forest_surv)) %>% 
  ggplot(aes(x = dbase_mean_sc, 
             y = value, 
             colour = name, 
             fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Survival probability") +
  xlab("Basal diameter /cm")

```

```{r}
curves_df_sz %>% 
  pivot_longer(c(primary_forest_haz, secondary_forest_haz)) %>% 
  ggplot (aes (x = dbase_mean_sc, 
               y = value, 
               colour = name, 
               fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Hazard") +
  xlab("Basal diameter /cm")
```


## By species 

### Survival

```{r}
grp_eff <- 
  get_variables(survival_model) %>%
  str_subset(pattern = "^r_genus_species")

pred_df_sz_sp <- 
  data_aggregated %>%
  data_grid(b_dbase_mean_sc = 
              seq(0.1, 50, 1)) %>%
  mutate(.chain = NA) %>%
  mutate(shape = NA) %>%
  mutate(.draw = NA) %>%
  mutate(.iteration = NA) %>%
  mutate(b_forest_logged0 = NA) %>%
  mutate(b_forest_logged1 = NA)

pred_df_sz_sp[grp_eff] <- NA

mcmc_df_sz_sp <-
  survival_model %>%
  spread_draws(shape, `r_.*`, `b_.*`,
                 regex = TRUE) %>% 
  mutate(b_dbase_mean_sc = NA)  %>% 
  rowwise() %>% 
  mutate(across(contains(",forest_logged0]"),
                 ~ .x + b_forest_logged0)) %>% 
  mutate(across(contains(",forest_logged1]"),
                 ~ .x + b_forest_logged1))

curves_df_sz_sp <-
  union(pred_df_sz_sp, mcmc_df_sz_sp) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_forest_logged0,
      b_forest_logged1,
      shape,
      `r_genus_species[Dipterocarpus_conformis,forest_logged0]`,
      `r_genus_species[Dryobalanops_lanceolata,forest_logged0]`,
      `r_genus_species[Hopea_sangal,forest_logged0]`,
      `r_genus_species[Parashorea_malaanonan,forest_logged0]`,
      `r_genus_species[Parashorea_tomentella,forest_logged0]`,
      `r_genus_species[Shorea_argentifolia,forest_logged0]`,
      `r_genus_species[Shorea_beccariana,forest_logged0]`,
      `r_genus_species[Shorea_faguetiana,forest_logged0]`,
      `r_genus_species[Shorea_gibbosa,forest_logged0]`,
      `r_genus_species[Shorea_johorensis,forest_logged0]`,
      `r_genus_species[Shorea_leprosula,forest_logged0]`,
      `r_genus_species[Shorea_macrophylla,forest_logged0]`,
      `r_genus_species[Shorea_macroptera,forest_logged0]`,
      `r_genus_species[Shorea_ovalis,forest_logged0]`,
      `r_genus_species[Shorea_parvifolia,forest_logged0]`,
      `r_genus_species[Dipterocarpus_conformis,forest_logged1]`,
      `r_genus_species[Dryobalanops_lanceolata,forest_logged1]`,
      `r_genus_species[Hopea_sangal,forest_logged1]`,
      `r_genus_species[Parashorea_malaanonan,forest_logged1]`,
      `r_genus_species[Parashorea_tomentella,forest_logged1]`,
      `r_genus_species[Shorea_argentifolia,forest_logged1]`,
      `r_genus_species[Shorea_beccariana,forest_logged1]`,
      `r_genus_species[Shorea_faguetiana,forest_logged1]`,
      `r_genus_species[Shorea_gibbosa,forest_logged1]`,
      `r_genus_species[Shorea_johorensis,forest_logged1]`,
      `r_genus_species[Shorea_leprosula,forest_logged1]`,
      `r_genus_species[Shorea_macrophylla,forest_logged1]`,
      `r_genus_species[Shorea_macroptera,forest_logged1]`,
      `r_genus_species[Shorea_ovalis,forest_logged1]`,
      `r_genus_species[Shorea_parvifolia,forest_logged1]`
    ),
    b_dbase_mean_sc
  ) %>%
  filter(!is.na(b_dbase_mean_sc)) %>%
  filter (!is.na(.draw)) %>%
  # survival curves
  mutate(across(contains("r_genus_species["),
                 ~ exp (-(((b_dbase_mean_sc - 0) / exp (.x))^shape)))) 
  
plotting_data_sp <- 
  curves_df_sz_sp %>% 
  pivot_longer(contains("r_genus_species[")) %>% 
  mutate(genus_species = str_split_i(string = name, pattern ="\\[", i = 2)) %>% 
  mutate(genus_species = str_split_i(string = genus_species, pattern =",", i = 1)) %>% 
  mutate(forest_type = str_split_i(string = name, pattern =",", i = 2)) %>% 
  mutate(forest_type = ifelse(forest_type== "forest_logged0]", "primary", "secondary")) 

```

```{r}
#| fig-height: 8 

plotting_data_sp %>% 
  ggplot (aes (x = b_dbase_mean_sc, 
               y = value, 
               colour = forest_type, 
               fill = forest_type)) +
  stat_lineribbon (.width = 0.95, alpha = 0.5) +
  ylab("Survival probability")+
  xlab("Basal diameter /cm") +
  facet_wrap(~genus_species, ncol = 3) +
  theme(legend.position = "bottom")
```

```{r}
#| fig-height: 8 

plotting_data_sp %>% 
  ggplot (aes (x = b_dbase_mean_sc, 
               y = value, 
               colour = genus_species, 
               fill = genus_species)) +
  stat_lineribbon (.width = 0, alpha = 0.5) +
  ylab("Survival probability")+
  xlab("Basal diameter /cm") +
  facet_wrap(~forest_type) +
  theme(legend.position = "bottom")
```

### Hazard

```{r}

curves_df_sz_sp_haz <-
  union(pred_df_sz_sp, mcmc_df_sz_sp) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_forest_logged0,
      b_forest_logged1,
      shape,
      `r_genus_species[Dipterocarpus_conformis,forest_logged0]`,
      `r_genus_species[Dryobalanops_lanceolata,forest_logged0]`,
      `r_genus_species[Hopea_sangal,forest_logged0]`,
      `r_genus_species[Parashorea_malaanonan,forest_logged0]`,
      `r_genus_species[Parashorea_tomentella,forest_logged0]`,
      `r_genus_species[Shorea_argentifolia,forest_logged0]`,
      `r_genus_species[Shorea_beccariana,forest_logged0]`,
      `r_genus_species[Shorea_faguetiana,forest_logged0]`,
      `r_genus_species[Shorea_gibbosa,forest_logged0]`,
      `r_genus_species[Shorea_johorensis,forest_logged0]`,
      `r_genus_species[Shorea_leprosula,forest_logged0]`,
      `r_genus_species[Shorea_macrophylla,forest_logged0]`,
      `r_genus_species[Shorea_macroptera,forest_logged0]`,
      `r_genus_species[Shorea_ovalis,forest_logged0]`,
      `r_genus_species[Shorea_parvifolia,forest_logged0]`,
      `r_genus_species[Dipterocarpus_conformis,forest_logged1]`,
      `r_genus_species[Dryobalanops_lanceolata,forest_logged1]`,
      `r_genus_species[Hopea_sangal,forest_logged1]`,
      `r_genus_species[Parashorea_malaanonan,forest_logged1]`,
      `r_genus_species[Parashorea_tomentella,forest_logged1]`,
      `r_genus_species[Shorea_argentifolia,forest_logged1]`,
      `r_genus_species[Shorea_beccariana,forest_logged1]`,
      `r_genus_species[Shorea_faguetiana,forest_logged1]`,
      `r_genus_species[Shorea_gibbosa,forest_logged1]`,
      `r_genus_species[Shorea_johorensis,forest_logged1]`,
      `r_genus_species[Shorea_leprosula,forest_logged1]`,
      `r_genus_species[Shorea_macrophylla,forest_logged1]`,
      `r_genus_species[Shorea_macroptera,forest_logged1]`,
      `r_genus_species[Shorea_ovalis,forest_logged1]`,
      `r_genus_species[Shorea_parvifolia,forest_logged1]`
    ),
    b_dbase_mean_sc
  ) %>%
  filter(!is.na(b_dbase_mean_sc)) %>%
  filter (.draw > 0) %>%
  # hazard
  mutate(across(contains("r_genus_species["),
                 ~ ((1 / exp (.x)) * shape *
                    ((b_dbase_mean_sc - 0) / 
                       exp (.x))^(shape - 1))))

  
plotting_data_sp_haz <- 
  curves_df_sz_sp_haz %>% 
  pivot_longer(contains("r_genus_species[")) %>% 
  mutate(genus_species = str_split_i(string = 
                                       name, pattern ="\\[", i = 2)) %>% 
  mutate(genus_species = str_split_i(string = 
                                       genus_species, pattern =",", i = 1)) %>% 
  mutate(forest_type = str_split_i(string = 
                                     name, pattern =",", i = 2)) %>% 
  mutate(forest_type = ifelse(forest_type == 
                                "forest_logged0]", "primary", "secondary")) 

```

```{r}
#| fig-height: 6 

plotting_data_sp_haz %>% 
  ggplot (aes (x = b_dbase_mean_sc, 
               y = value, 
               colour = forest_type, 
               fill = forest_type)) +
  stat_lineribbon (.width= 0.95, alpha = 0.5) +
  ylab("Hazard")+
  xlab("Basal diameter /cm") +
  facet_wrap(~genus_species, ncol = 3, scales = "free_y") +
  theme(legend.position = "bottom")
```

The hazard rate is the instantaneous failure rate.


# Imputed size model

```{r}
pred_df_sz <- 
  data_aggregated %>%
  data_grid(bsp_timetolastalive_midbh_mean_sc = 
              seq(0.1, 100.1, 1)) %>%
  mutate(.chain = NA) %>%
  mutate(shape_timetolastalive = NA) %>%
  mutate(.draw = NA) %>%
  mutate(.iteration = NA) %>%
  mutate(b_timetolastalive_forest_logged0 = NA) %>%
  mutate(b_timetolastalive_forest_logged1 = NA)

# put together the relevant estimates from the mcmc chains
mcmc_df_sz <-
  survival_model_impute %>%
  spread_draws(b_timetolastalive_forest_logged0,
               b_timetolastalive_forest_logged1,
               shape_timetolastalive) %>%
  mutate(bsp_timetolastalive_midbh_mean_sc = NA) 

# combine information for prediction and MCMC chains,
# estimate survival, hazard and relative hazard curves
curves_df_sz <-
  union(pred_df_sz, mcmc_df_sz) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_timetolastalive_forest_logged0,
      b_timetolastalive_forest_logged1,
      shape_timetolastalive
    ),
    bsp_timetolastalive_midbh_mean_sc
  ) %>%
  filter (!is.na(bsp_timetolastalive_midbh_mean_sc)) %>%
  filter (!is.na(.draw)) %>%
  # survival curves
  mutate (primary_forest_surv = exp (-(((bsp_timetolastalive_midbh_mean_sc - 0) / 
                            exp (b_timetolastalive_forest_logged0))^shape_timetolastalive))) %>%
  mutate (secondary_forest_surv = exp (-(((bsp_timetolastalive_midbh_mean_sc - 0) / 
                            exp (b_timetolastalive_forest_logged1))^shape_timetolastalive))) %>%
  # hazard curves
  mutate(primary_forest_haz = ((1 / exp (b_timetolastalive_forest_logged0)) * shape_timetolastalive *
                    ((bsp_timetolastalive_midbh_mean_sc - 0) / 
                       exp (b_timetolastalive_forest_logged0))^(shape_timetolastalive - 1))) %>%
  mutate(secondary_forest_haz = ((1 / exp (b_timetolastalive_forest_logged1)) * shape_timetolastalive *
                    ((bsp_timetolastalive_midbh_mean_sc - 0) / 
                       exp (b_timetolastalive_forest_logged1))^(shape_timetolastalive - 1))) 
```

```{r}
curves_df_sz %>% 
  pivot_longer(c(primary_forest_surv, secondary_forest_surv)) %>% 
  ggplot(aes(x = bsp_timetolastalive_midbh_mean_sc, 
             y = value, 
             colour = name, 
             fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Survival probability") +
  xlab("DBH /cm")

```

```{r}
curves_df_sz %>% 
  pivot_longer(c(primary_forest_haz, secondary_forest_haz)) %>% 
  ggplot(aes(x = bsp_timetolastalive_midbh_mean_sc, 
             y = value, 
             colour = name, 
             fill = name)) +
  stat_lineribbon (.width= .95, alpha = 0.5) +
  ylab("Hazard") +
  xlab("DBH /cm")

```

## By species 

### Survival

```{r}
grp_eff_im <- 
  get_variables(survival_model_impute) %>%
  str_subset(pattern = "^r_genus_species")

pred_df_sz_sp <- 
  data_aggregated %>%
  data_grid(bsp_timetolastalive_midbh_mean_sc = 
              seq(0.1, 100.1, 1)) %>%
  mutate(.chain = NA) %>%
  mutate(shape_timetolastalive = NA) %>%
  mutate(.draw = NA) %>%
  mutate(.iteration = NA) %>%
  mutate(b_timetolastalive_forest_logged0 = NA) %>%
  mutate(b_timetolastalive_forest_logged1 = NA)

pred_df_sz_sp[grp_eff_im] <- NA

mcmc_df_sz_sp <-
  survival_model_impute %>%
  spread_draws(shape_timetolastalive, `r_.*`, 
               b_timetolastalive_forest_logged0,
               b_timetolastalive_forest_logged1,
               bsp_timetolastalive_midbh_mean_sc,
                 regex = TRUE) %>% 
  mutate(bsp_timetolastalive_midbh_mean_sc = NA)  %>% 
  rowwise() %>% 
  mutate(across(contains(",forest_logged0]"),
                 ~ .x + b_timetolastalive_forest_logged0)) %>% 
  mutate(across(contains(",forest_logged1]"),
                 ~ .x + b_timetolastalive_forest_logged1))

curves_df_sz_sp <-
  union(pred_df_sz_sp, mcmc_df_sz_sp) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_timetolastalive_forest_logged0,
      b_timetolastalive_forest_logged1,
      shape_timetolastalive,
      `r_genus_species__timetolastalive[Dipterocarpus_conformis,forest_logged0]`,
      `r_genus_species__timetolastalive[Dryobalanops_lanceolata,forest_logged0]`,
      `r_genus_species__timetolastalive[Hopea_sangal,forest_logged0]`,
      `r_genus_species__timetolastalive[Parashorea_malaanonan,forest_logged0]`,
      `r_genus_species__timetolastalive[Parashorea_tomentella,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_argentifolia,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_beccariana,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_faguetiana,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_gibbosa,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_johorensis,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_leprosula,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_macrophylla,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_macroptera,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_ovalis,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_parvifolia,forest_logged0]`,
      `r_genus_species__timetolastalive[Dipterocarpus_conformis,forest_logged1]`,
      `r_genus_species__timetolastalive[Dryobalanops_lanceolata,forest_logged1]`,
      `r_genus_species__timetolastalive[Hopea_sangal,forest_logged1]`,
      `r_genus_species__timetolastalive[Parashorea_malaanonan,forest_logged1]`,
      `r_genus_species__timetolastalive[Parashorea_tomentella,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_argentifolia,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_beccariana,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_faguetiana,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_gibbosa,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_johorensis,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_leprosula,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_macrophylla,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_macroptera,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_ovalis,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_parvifolia,forest_logged1]`
    ),
    bsp_timetolastalive_midbh_mean_sc
  ) %>%
  filter(!is.na(bsp_timetolastalive_midbh_mean_sc)) %>%
  filter (!is.na(.draw)) %>%
  # survival curves
  mutate(across(contains("r_genus_species__timetolastalive["),
                 ~ exp (-(((bsp_timetolastalive_midbh_mean_sc - 0) / exp (.x))^shape_timetolastalive)))) 
  
plotting_data_sp <- 
  curves_df_sz_sp %>% 
  pivot_longer(contains("r_genus_species__")) %>% 
  mutate(genus_species = str_split_i(string = name, pattern ="\\[", i = 2)) %>% 
  mutate(genus_species = str_split_i(string = genus_species, pattern =",", i = 1)) %>% 
  mutate(forest_type = str_split_i(string = name, pattern =",", i = 2)) %>% 
  mutate(forest_type = ifelse(forest_type== "forest_logged0]", "primary", "secondary")) 

```

```{r}
#| fig-height: 6 

plotting_data_sp %>% 
  ggplot (aes (x = bsp_timetolastalive_midbh_mean_sc, 
               y = value, 
               colour = forest_type, 
               fill = forest_type)) +
  stat_lineribbon (.width = 0.95, alpha = 0.5) +
  ylab("Survival probability")+
  xlab("DBH /cm") +
  facet_wrap(~genus_species, ncol = 3) +
  theme(legend.position = "bottom")
```

### Hazard

```{r}

curves_df_sz_sp_haz <-
  union(pred_df_sz_sp, mcmc_df_sz_sp) %>%
  expand(
    nesting(
      .chain,
      .iteration,
      .draw,
      b_timetolastalive_forest_logged0,
      b_timetolastalive_forest_logged1,
      shape_timetolastalive,
      `r_genus_species__timetolastalive[Dipterocarpus_conformis,forest_logged0]`,
      `r_genus_species__timetolastalive[Dryobalanops_lanceolata,forest_logged0]`,
      `r_genus_species__timetolastalive[Hopea_sangal,forest_logged0]`,
      `r_genus_species__timetolastalive[Parashorea_malaanonan,forest_logged0]`,
      `r_genus_species__timetolastalive[Parashorea_tomentella,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_argentifolia,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_beccariana,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_faguetiana,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_gibbosa,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_johorensis,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_leprosula,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_macrophylla,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_macroptera,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_ovalis,forest_logged0]`,
      `r_genus_species__timetolastalive[Shorea_parvifolia,forest_logged0]`,
      `r_genus_species__timetolastalive[Dipterocarpus_conformis,forest_logged1]`,
      `r_genus_species__timetolastalive[Dryobalanops_lanceolata,forest_logged1]`,
      `r_genus_species__timetolastalive[Hopea_sangal,forest_logged1]`,
      `r_genus_species__timetolastalive[Parashorea_malaanonan,forest_logged1]`,
      `r_genus_species__timetolastalive[Parashorea_tomentella,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_argentifolia,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_beccariana,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_faguetiana,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_gibbosa,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_johorensis,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_leprosula,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_macrophylla,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_macroptera,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_ovalis,forest_logged1]`,
      `r_genus_species__timetolastalive[Shorea_parvifolia,forest_logged1]`
    ),
    bsp_timetolastalive_midbh_mean_sc
  ) %>%
  filter(!is.na(bsp_timetolastalive_midbh_mean_sc)) %>%
  filter (!is.na(.draw)) %>%
  # hazard
  mutate(across(contains("r_genus_species__timetolastalive["),
                 ~ ((1 / exp (.x)) * shape_timetolastalive *
                    ((bsp_timetolastalive_midbh_mean_sc - 0) / 
                       exp (.x))^(shape_timetolastalive - 1))))
  
plotting_data_sp <- 
  curves_df_sz_sp_haz %>% 
  pivot_longer(contains("r_genus_species__")) %>% 
  mutate(genus_species = str_split_i(string = name, pattern ="\\[", i = 2)) %>% 
  mutate(genus_species = str_split_i(string = genus_species, pattern =",", i = 1)) %>% 
  mutate(forest_type = str_split_i(string = name, pattern =",", i = 2)) %>% 
  mutate(forest_type = ifelse(forest_type== "forest_logged0]", "primary", "secondary")) 

```

```{r}
#| fig-height: 6 

plotting_data_sp %>% 
  ggplot (aes (x = bsp_timetolastalive_midbh_mean_sc, 
               y = value, 
               colour = forest_type, 
               fill = forest_type)) +
  stat_lineribbon (.width = 0.95, alpha = 0.5) +
  ylab("Hazard")+
  xlab("DBH /cm") +
  facet_wrap(~genus_species, ncol = 3, scales = "free_y") +
  theme(legend.position = "bottom")
```
